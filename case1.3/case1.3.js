const apiKey = "9X112PNV2KAEZF4F36PQHTTQHFZZ1NQTUP";

document.addEventListener('DOMContentLoaded', () => {
  const clueButtons = document.querySelectorAll('#clues button');
  const clueTextDiv = document.getElementById('clueText');
  const miniGameContainer = document.getElementById('miniGameContainer');

  const viewedClues = new Set();

  clueButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      const clue = btn.getAttribute('data-clue');
      viewedClues.add(clue);

      if (clue === 'transactions') {
        clueTextDiv.style.display = 'none';
        showMiniGame();
      } else {
        miniGameContainer.style.display = 'none';
        clearMiniGame();
        clueTextDiv.style.display = 'block';
        clueTextDiv.textContent = clueDescription(clue);
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–µ–∑–¥–∞ –Ω–∞ –æ–±—ã—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–µ—Ç—å–µ–π –∑–∞—Ü–µ–ø–∫–∏ (devices)
      if (clue === 'devices' && !document.getElementById('proceedButton')) {
        showProceedButton();
      }
    });
  });
});

function clueDescription(clue) {
  switch(clue) {
    case 'spyware':
      return "–ê–Ω—Ç–∏–≤–∏—Ä—É—Å –ø–æ–∫–∞–∑–∞–ª —á–∏—Å—Ç–æ, –Ω–∏–∫–∞–∫–∏—Ö —à–ø–∏–æ–Ω—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º –Ω–µ—Ç.";
    case 'devices':
      return `–ò–≥—Ä–æ–∫ (–º—ã—Å–ª–µ–Ω–Ω–æ):\n*–ù—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —á–µ—Ä–µ–∑ —É–∫—Ä–∞–¥–µ–Ω–Ω—É—é seed-—Ñ—Ä–∞–∑—É.*\n\n–≠–∫—Å–ø–µ—Ä—Ç:\n‚Äî –ï—Å–ª–∏ seed-—Ñ—Ä–∞–∑–∞ –ø–æ–ø–∞–ª–∞ –≤ —Ä—É–∫–∏ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞, –æ–Ω –º–æ–∂–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª—ë–∫. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –µ—ë –Ω–∏–∫–æ–º—É, –Ω–µ —Ö—Ä–∞–Ω–∏—Ç–µ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∏–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.\n\n–ò–≥—Ä–æ–∫:\n‚Äî –ó–Ω–∞—á–∏—Ç, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–∑–Ω–∞–ª seed-—Ñ—Ä–∞–∑—É, –ø–∞—Ä–æ–ª—å –Ω–µ —Å–ø–∞—Å—ë—Ç?\n\n–≠–∫—Å–ø–µ—Ä—Ç:\n‚Äî –î–∞. Seed-—Ñ—Ä–∞–∑–∞ ‚Äî —ç—Ç–æ –∫–ª—é—á –∫ –≤–∞—à–µ–º—É –∫–æ—à–µ–ª—å–∫—É. –ï—ë –∑–∞—â–∏—Ç–∞ ‚Äî –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.`;
    case 'phishing':
      return "–§–∏—à–∏–Ω–≥–æ–≤—ã—Ö –ø–∏—Å–µ–º —è –Ω–µ –ø–æ–º–Ω—é, –Ω–∏—á–µ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–µ –ø–æ–ª—É—á–∞–ª.";
    default:
      return "";
  }
}

function showMiniGame() {
  const miniGameContainer = document.getElementById('miniGameContainer');
  miniGameContainer.style.display = 'block';
  miniGameContainer.innerHTML = `
    <h3>–ú–∏–Ω–∏-–∏–≥—Ä–∞: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</h3>
    <div id="searchArea">
      <div class="radio-group">
        <label><input type="radio" name="searchType" value="tx" checked> –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</label>
        <label><input type="radio" name="searchType" value="address"> –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞</label>
      </div>
      <textarea id="searchInput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞" rows="3"></textarea>
      <div class="buttons">
        <button id="searchButton">–ü–æ–∏—Å–∫</button>
        <button id="clearButton">–û—á–∏—Å—Ç–∏—Ç—å</button>
        <button id="backToCluesButton" style="background:#333; color:#0f0; margin-left: 15px;">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—Ü–µ–ø–∫–∞–º</button>
      </div>
      <div id="result"></div>
      <div id="errorMessage"></div>
      
      <!-- –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ —Å –ø—Ä–∏–º–µ—Ä–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è -->
      <div style="margin-top: 20px; background: #222; padding: 10px; border-radius: 5px;">
        <p>–ü—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞):</p>
        <div style="display: flex; align-items: center; gap: 10px;">
          <input type="text" id="sampleTx" value="0x71b08afff159d0d08015662bbf69d757e68668366281d0696a670695f1969eb9" 
                 readonly style="flex: 1; padding: 5px; background: #333; color: #fff; border: 1px solid #444;">
          <button onclick="copySampleTx()" style="padding: 5px 10px; background: #444; color: #fff; border: none; border-radius: 3px; cursor: pointer;">
            –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
          </button>
        </div>
      </div>
    </div>
  `;

  document.getElementById('searchButton').addEventListener('click', search);
  document.getElementById('clearButton').addEventListener('click', clearAll);
  document.getElementById('backToCluesButton').addEventListener('click', () => {
    document.getElementById('miniGameContainer').style.display = 'none';
    document.getElementById('clueText').style.display = 'none';
  });
}


function copySampleTx() {
  const sampleTxInput = document.getElementById('sampleTx');
  sampleTxInput.select();
  document.execCommand('copy');
};

  document.getElementById('searchButton').addEventListener('click', search);
  document.getElementById('clearButton').addEventListener('click', clearAll);
  document.getElementById('backToCluesButton').addEventListener('click', () => {
    document.getElementById('miniGameContainer').style.display = 'none';
    document.getElementById('clueText').style.display = 'none';
  });


function clearMiniGame() {
  const miniGameContainer = document.getElementById('miniGameContainer');
  miniGameContainer.innerHTML = '';
}

async function search() {
  clearError();
  clearResult();

  const input = document.getElementById('searchInput').value.trim();
  const type = document.querySelector('input[name="searchType"]:checked').value;

  if (!input) {
    showError('‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.');
    return;
  }

  if (type === 'tx') {
    if (!input.startsWith('0x') || input.length !== 66) {
      showError('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (64 —Å–∏–º–≤–æ–ª–∞ –ø–æ—Å–ª–µ 0x)');
      return;
    }
    await fetchTransaction(input);
  } else {
    if (!input.startsWith('0x') || input.length !== 42) {
      showError('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (42 —Å–∏–º–≤–æ–ª–∞ –Ω–∞—á–∏–Ω–∞—è —Å 0x)');
      return;
    }
    await fetchAddressTransactions(input);
  }
}

async function fetchTransaction(hash) {
  const url = `https://api.etherscan.io/api?module=proxy&action=eth_getTransactionByHash&txhash=${hash}&apikey=${apiKey}`;
  try {
    const res = await fetch(url);
    const data = await res.json();
    if (!data.result) {
      showError('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return;
    }
    const tx = data.result;
    const ether = Number(BigInt(tx.value)) / 1e18;
    const blockNum = parseInt(tx.blockNumber, 16);

    document.getElementById("result").innerHTML = `
      <b>Hash:</b> <span class="link" onclick="fetchTransaction('${tx.hash}')">${tx.hash}</span><br>
      <b>–û—Ç:</b> <span class="link" onclick="fetchAddressTransactions('${tx.from}')">${tx.from}</span><br>
      <b>–ö–æ–º—É:</b> <span class="link" onclick="fetchAddressTransactions('${tx.to}')">${tx.to}</span><br>
      <b>–°—É–º–º–∞:</b> ${ether} ETH<br>
      <b>–ë–ª–æ–∫:</b> ${blockNum}
    `;
  } catch (error) {
    showError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ' + error.message);
  }
}

async function fetchAddressTransactions(address) {
  const url = `https://api.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${apiKey}`;
  try {
    const res = await fetch(url);
    const data = await res.json();

    if (data.status !== "1" || !data.result.length) {
      showError('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }

    let html = `<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${address}:</b><br><br>`;
    data.result.forEach(tx => {
      const ether = (tx.value / 1e18).toFixed(4);
      html += `
        <div style="margin-bottom:10px;">
          <b>Hash:</b> <span class="link" onclick="fetchTransaction('${tx.hash}')">${tx.hash}</span><br>
          <b>–û—Ç:</b> <span class="link" onclick="fetchAddressTransactions('${tx.from}')">${tx.from}</span><br>
          <b>–ö–æ–º—É:</b> <span class="link" onclick="fetchAddressTransactions('${tx.to}')">${tx.to}</span><br>
          <b>–°—É–º–º–∞:</b> ${ether} ETH<br>
        </div>
      `;
    });
    document.getElementById("result").innerHTML = html;
  } catch (error) {
    showError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ' + error.message);
  }
}

function clearAll() {
  document.getElementById('searchInput').value = '';
  clearResult();
  clearError();
}

function clearResult() {
  const res = document.getElementById("result");
  if (res) res.innerHTML = "";
}

function showError(msg) {
  const errDiv = document.getElementById('errorMessage');
  if (errDiv) errDiv.textContent = msg;
}

function clearError() {
  const errDiv = document.getElementById('errorMessage');
  if (errDiv) errDiv.textContent = "";
}

function showProceedButton() {
  const container = document.getElementById('actionButtonContainer');

  const btn = document.createElement('button');
  btn.id = 'proceedButton';
  btn.textContent = 'üöì –í—ã–µ—Ö–∞—Ç—å –Ω–∞ –æ–±—ã—Å–∫';
  btn.style.background = '#f00';
  btn.style.color = '#fff';
  btn.style.fontSize = '22px';
  btn.style.padding = '15px 30px';
  btn.style.border = 'none';
  btn.style.borderRadius = '12px';
  btn.style.cursor = 'pointer';

  btn.addEventListener('click', () => {
    window.location.href = '/1stCaseEnd/1stCase.html';
  });

  container.appendChild(btn);
}
